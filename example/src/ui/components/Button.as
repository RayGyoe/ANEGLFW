package ui.components
{
	import ui.core.UIComponent;
	import ui.events.UIEvent;
	import ui.text.TextRenderer;
	import agl.shader.Shader;
	import com.vsdevelop.air.extension.glfw.Gl;
	import agl.utils.Matrix4;
	import flash.geom.Matrix3D;

	/**
	 * 按钮组件类
	 * 提供可点击的按钮功能，支持文本显示、状态变化和事件处理
	 * @author Generated by AI Assistant
	 */
	public class Button extends UIComponent
	{
		// 按钮状态枚举
		public static const STATE_NORMAL:String = "normal";
		public static const STATE_HOVER:String = "hover";
		public static const STATE_PRESSED:String = "pressed";
		public static const STATE_DISABLED:String = "disabled";
		
		// 按钮属性
		private var _text:String = "";
		private var _state:String = STATE_NORMAL;
		
		// 颜色配置
		private var _normalColor:Vector.<Number>;
		private var _hoverColor:Vector.<Number>;
		private var _pressedColor:Vector.<Number>;
		private var _disabledColor:Vector.<Number>;
		private var _textColor:Vector.<Number>;
		
		// 着色器资源
		[Embed(source="../../assets/ui/ui_vertex.glsl", mimeType="application/octet-stream")]
		private var VertexShaderSource:Class;
		
		[Embed(source="../../assets/ui/ui_fragment.glsl", mimeType="application/octet-stream")]
		private var FragmentShaderSource:Class;
		
		// 渲染相关
		private var _modelMatrix:Matrix4;
		
		// 文本渲染器
		private var _textRenderer:TextRenderer;
		
		/**
		 * 构造函数
		 * @param x X坐标
		 * @param y Y坐标
		 * @param width 宽度
		 * @param height 高度
		 * @param text 按钮文本
		 */
		public function Button(x:Number = 0, y:Number = 0, width:Number = 100, height:Number = 36, text:String = "Button")
		{
			super(x, y, width, height);
			_text = text;
			
			initializeButton();
			setupEventListeners();
		}
		
		/**
		 * 初始化按钮
		 */
		private function initializeButton():void
		{
			// 初始化颜色配置
			_normalColor = new <Number>[0.3, 0.3, 0.3, 1.0];     // 深灰色
			_hoverColor = new <Number>[0.4, 0.4, 0.4, 1.0];      // 较亮的灰色
			_pressedColor = new <Number>[0.2, 0.2, 0.2, 1.0];    // 更深的灰色
			_disabledColor = new <Number>[0.1, 0.1, 0.1, 0.5];   // 半透明深灰色
			_textColor = new <Number>[1.0, 1.0, 1.0, 1.0];       // 白色文本
			
			// 创建着色器
			var vs:String = new VertexShaderSource();
			var fs:String = new FragmentShaderSource();
			_shader = new Shader(vs, fs);
			
			// 创建模型矩阵
			_modelMatrix = new Matrix4();
			
			// 创建文本渲染器
			_textRenderer = new TextRenderer();
			_textRenderer.setText(_text, 18, 0xFFFFFF, "微软雅黑");
		}
		
		/**
		 * 设置事件监听器
		 */
		private function setupEventListeners():void
		{
			addEventListener(UIEvent.MOUSE_OVER, onMouseOver);
			addEventListener(UIEvent.MOUSE_OUT, onMouseOut);
			addEventListener(UIEvent.MOUSE_DOWN, onMouseDown);
			addEventListener(UIEvent.MOUSE_UP, onMouseUp);
			addEventListener(UIEvent.CLICK, onClick);
		}
		
		/**
		 * 鼠标悬停事件处理
		 * @param event 事件对象
		 */
		private function onMouseOver(event:UIEvent):void
		{
			if (_enabled && _state != STATE_PRESSED)
			{
				setState(STATE_HOVER);
			}
		}
		
		/**
		 * 鼠标离开事件处理
		 * @param event 事件对象
		 */
		private function onMouseOut(event:UIEvent):void
		{
			if (_enabled && _state != STATE_PRESSED)
			{
				setState(STATE_NORMAL);
			}
		}
		
		/**
		 * 鼠标按下事件处理
		 * @param event 事件对象
		 */
		private function onMouseDown(event:UIEvent):void
		{
			if (_enabled)
			{
				setState(STATE_PRESSED);
			}
		}
		
		/**
		 * 鼠标释放事件处理
		 * @param event 事件对象
		 */
		private function onMouseUp(event:UIEvent):void
		{
			if (_enabled)
			{
				// 检查鼠标是否还在按钮内
				if (hitTest(event.mouseX, event.mouseY))
				{
					setState(STATE_HOVER);
				}
				else
				{
					setState(STATE_NORMAL);
				}
			}
		}
		
		/**
		 * 点击事件处理
		 * @param event 事件对象
		 */
		private function onClick(event:UIEvent):void
		{
			if (_enabled)
			{
				// 可以在这里添加点击音效或其他反馈
				trace("Button clicked: " + _text);
			}
		}
		
		/**
		 * 设置按钮状态
		 * @param newState 新状态
		 */
		private function setState(newState:String):void
		{
			if (_state != newState)
			{
				_state = newState;
				_needsRedraw = true;
			}
		}
		
		/**
		 * 获取当前状态对应的颜色
		 * @return 颜色向量
		 */
		private function getCurrentColor():Vector.<Number>
		{
			if (!_enabled)
			{
				return _disabledColor;
			}
			
			switch (_state)
			{
				case STATE_HOVER:
					return _hoverColor;
				case STATE_PRESSED:
					return _pressedColor;
				case STATE_DISABLED:
					return _disabledColor;
				default:
					return _normalColor;
			}
		}
		
		/**
		 * 重写渲染方法
		 */
		protected override function doRender():void
		{
			if (!_shader) return;
			
			// 使用着色器程序
			_shader.useProgram();
			
			// 设置模型矩阵（单位矩阵，因为顶点已经是世界坐标）
			_modelMatrix.identity();
			_shader.setMatrix4fv("uModel", _modelMatrix);
			
			// 设置投影矩阵（从UIManager获取）
			var uiManager:ui.core.UIManager = ui.core.UIManager.getInstance();
			_shader.setMatrix4fv("uProjection", uiManager.projectionMatrix);
			
			// 设置颜色和绘制按钮背景
			var currentColor:Vector.<Number> = getCurrentColor();
			with (Gl)
			{
				// 设置颜色
				glUniform4f(glGetUniformLocation(_shader.program, "uColor"), 
							 currentColor[0], currentColor[1], currentColor[2], currentColor[3]);
				
				// 设置透明度
				glUniform1f(glGetUniformLocation(_shader.program, "uAlpha"), _alpha);
				
				// 设置不使用纹理
				glUniform1i(glGetUniformLocation(_shader.program, "uUseTexture"), 0);
				
				// 绘制按钮背景
				glBindVertexArray(_VAO);
				glDrawArrays(GL_TRIANGLES, 0, 6);
				glBindVertexArray(0);
			}
			
			// 渲染文本
			if (_textRenderer && _text && _text.length > 0)
			{
				// 设置文本渲染器的着色器
				_textRenderer.setShader(_shader);
				
				// 更新文本渲染器的边界
				_textRenderer.setRenderBounds(_x, _y, _width, _height);
				// 渲染文本
				_textRenderer.render();
			}
		}
		
		/**
		 * 设置按钮颜色
		 * @param normal 正常状态颜色
		 * @param hover 悬停状态颜色
		 * @param pressed 按下状态颜色
		 * @param disabled 禁用状态颜色
		 */
		public function setColors(normal:Vector.<Number>, hover:Vector.<Number>, 
								 pressed:Vector.<Number>, disabled:Vector.<Number>):void
		{
			_normalColor = normal;
			_hoverColor = hover;
			_pressedColor = pressed;
			_disabledColor = disabled;
			_needsRedraw = true;
		}
		
		/**
		 * 重写enabled属性设置器
		 */
		public override function set enabled(value:Boolean):void
		{
			super.enabled = value;
			if (value)
			{
				setState(STATE_NORMAL);
			}
			else
			{
				setState(STATE_DISABLED);
			}
		}
		
		// 属性访问器
		public function get text():String { return _text; }
		public function set text(value:String):void
		{
			if (_text != value)
			{
				_text = value;
				if (_textRenderer)
				{
					_textRenderer.setText(_text, 16, 0xFFFFFF, "微软雅黑");
				}
				_needsRedraw = true;
			}
		}
		
		public function get state():String { return _state; }
		
		/**
		 * 重写dispose方法以释放文本渲染器资源
		 */
		public override function dispose():void
		{
			// 释放文本渲染器资源
			if (_textRenderer)
			{
				_textRenderer.dispose();
				_textRenderer = null;
			}
			
			// 调用父类的dispose方法
			super.dispose();
		}
	}
}