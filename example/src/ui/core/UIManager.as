package ui.core
{
	import flash.events.EventDispatcher;
	import flash.geom.Point;
	import ui.events.UIEvent;
	import com.vsdevelop.air.extension.glfw.Gl;
	import agl.utils.Matrix4;

	/**
	 * UI管理器类
	 * 负责管理所有UI组件的渲染、事件分发和生命周期
	 * @author Generated by AI Assistant
	 */
	public class UIManager extends EventDispatcher
	{
		// 单例实例
		private static var _instance:UIManager;
		
		// UI组件列表
		private var _components:Vector.<UIComponent>;
		private var _focusedComponent:UIComponent;
		private var _hoveredComponent:UIComponent;
		
		// 视口信息
		private var _viewportWidth:int;
		private var _viewportHeight:int;
		private var _projectionMatrix:Matrix4;
		
		// 鼠标状态
		private var _mouseX:Number = 0;
		private var _mouseY:Number = 0;
		private var _mousePressed:Boolean = false;
		
		/**
		 * 获取单例实例
		 * @return UIManager实例
		 */
		public static function getInstance():UIManager
		{
			if (!_instance)
			{
				_instance = new UIManager();
			}
			return _instance;
		}
		
		/**
		 * 构造函数（私有）
		 */
		public function UIManager()
		{
			if (_instance)
			{
				throw new Error("UIManager is a singleton class. Use getInstance() instead.");
			}
			
			_components = new Vector.<UIComponent>();
			initialize();
		}
		
		/**
		 * 初始化UI管理器
		 */
		private function initialize():void
		{
			// 设置默认视口
			setViewport(800, 600);
		}
		
		/**
		 * 设置视口大小
		 * @param width 宽度
		 * @param height 高度
		 */
		public function setViewport(width:int, height:int):void
		{
			_viewportWidth = width;
			_viewportHeight = height;
			
			// 创建正交投影矩阵（2D UI）
			_projectionMatrix = new Matrix4();
			setOrthographicProjection(0, width, height, 0, -1, 1);
		}
		
		/**
		 * 设置正交投影矩阵
		 * @param left 左边界
		 * @param right 右边界
		 * @param bottom 下边界
		 * @param top 上边界
		 * @param near 近平面
		 * @param far 远平面
		 */
		private function setOrthographicProjection(left:Number, right:Number, bottom:Number, 
												  top:Number, near:Number, far:Number):void
		{
			var e:Vector.<Number> = _projectionMatrix.rawData;
			
			e[0] = 2 / (right - left);
			e[1] = 0;
			e[2] = 0;
			e[3] = 0;
			
			e[4] = 0;
			e[5] = 2 / (top - bottom);
			e[6] = 0;
			e[7] = 0;
			
			e[8] = 0;
			e[9] = 0;
			e[10] = -2 / (far - near);
			e[11] = 0;
			
			e[12] = -(right + left) / (right - left);
			e[13] = -(top + bottom) / (top - bottom);
			e[14] = -(far + near) / (far - near);
			e[15] = 1;
			
			_projectionMatrix.rawData = e;
		}
		
		/**
		 * 添加UI组件
		 * @param component 要添加的组件
		 */
		public function addComponent(component:UIComponent):void
		{
			if (_components.indexOf(component) == -1)
			{
				_components.push(component);
			}
		}
		
		/**
		 * 添加背景组件到最底层
		 * @param component 要添加的背景组件
		 */
		public function addBackgroundComponent(component:UIComponent):void
		{
			if (_components.indexOf(component) == -1)
			{
				_components.unshift(component); // 插入到数组开头，确保在最底层
			}
		}
		
		/**
		 * 移除UI组件
		 * @param component 要移除的组件
		 */
		public function removeComponent(component:UIComponent):void
		{
			var index:int = _components.indexOf(component);
			if (index >= 0)
			{
				_components.splice(index, 1);
			}
		}
		
		/**
		 * 获取组件数量
		 * @return 当前管理的组件数量
		 */
		public function getComponentCount():int
		{
			return _components.length;
		}
		
		/**
		 * 渲染所有UI组件
		 */
		public function render():void
		{
			with (Gl)
			{
				// 启用混合模式以支持透明度
				glEnable(GL_BLEND);
				glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
			}
			
			// 渲染所有组件
			for (var i:int = 0; i < _components.length; i++)
			{
				_components[i].render();
			}
			
			with (Gl)
			{
				glDisable(GL_BLEND);
			}
		}
		
		/**
		 * 处理鼠标移动事件
		 * @param x 鼠标X坐标
		 * @param y 鼠标Y坐标
		 */
		public function handleMouseMove(x:Number, y:Number):void
		{
			_mouseX = x;
			_mouseY = y;
			
			// 查找鼠标悬停的组件
			var newHoveredComponent:UIComponent = getComponentAt(x, y);
			
			// 处理鼠标离开事件
			if (_hoveredComponent && _hoveredComponent != newHoveredComponent)
			{
				_hoveredComponent.dispatchEvent(new UIEvent(UIEvent.MOUSE_OUT, false, false, x, y));
			}
			
			// 处理鼠标进入事件
			if (newHoveredComponent && newHoveredComponent != _hoveredComponent)
			{
				newHoveredComponent.dispatchEvent(new UIEvent(UIEvent.MOUSE_OVER, false, false, x, y));
			}
			
			// 处理鼠标移动事件
			if (newHoveredComponent)
			{
				newHoveredComponent.dispatchEvent(new UIEvent(UIEvent.MOUSE_MOVE, false, false, x, y));
			}
			
			_hoveredComponent = newHoveredComponent;
		}
		
		/**
		 * 处理鼠标按下事件
		 * @param x 鼠标X坐标
		 * @param y 鼠标Y坐标
		 * @param button 鼠标按钮
		 */
		public function handleMouseDown(x:Number, y:Number, button:int = 0):void
		{
			_mousePressed = true;
			_mouseX = x;
			_mouseY = y;
			
			var component:UIComponent = getComponentAt(x, y);
			if (component)
			{
				// 设置焦点
				setFocus(component);
				
				// 分发鼠标按下事件
				component.dispatchEvent(new UIEvent(UIEvent.MOUSE_DOWN, false, false, x, y));
			}
			else
			{
				// 点击空白区域，清除焦点
				setFocus(null);
			}
		}
		
		/**
		 * 处理鼠标释放事件
		 * @param x 鼠标X坐标
		 * @param y 鼠标Y坐标
		 * @param button 鼠标按钮
		 */
		public function handleMouseUp(x:Number, y:Number, button:int = 0):void
		{
			var wasPressed:Boolean = _mousePressed;
			_mousePressed = false;
			_mouseX = x;
			_mouseY = y;
			
			var component:UIComponent = getComponentAt(x, y);
			if (component)
			{
				// 分发鼠标释放事件
				component.dispatchEvent(new UIEvent(UIEvent.MOUSE_UP, false, false, x, y));
				
				// 如果之前有按下，则分发点击事件
				if (wasPressed)
				{
					component.dispatchEvent(new UIEvent(UIEvent.CLICK, false, false, x, y));
				}
			}
		}
		
		/**
		 * 获取指定坐标处的组件
		 * @param x X坐标
		 * @param y Y坐标
		 * @return 找到的组件，如果没有则返回null
		 */
		public function getComponentAt(x:Number, y:Number):UIComponent
		{
			// 从后往前遍历（后添加的组件在上层）
			for (var i:int = _components.length - 1; i >= 0; i--)
			{
				var component:UIComponent = _components[i];
				if (component.hitTest(x, y))
				{
					return component;
				}
			}
			return null;
		}
		
		/**
		 * 设置焦点组件
		 * @param component 要设置焦点的组件
		 */
		public function setFocus(component:UIComponent):void
		{
			if (_focusedComponent != component)
			{
				// 移除旧焦点
				if (_focusedComponent)
				{
					_focusedComponent.dispatchEvent(new UIEvent(UIEvent.FOCUS_OUT));
				}
				
				// 设置新焦点
				_focusedComponent = component;
				if (_focusedComponent)
				{
					_focusedComponent.dispatchEvent(new UIEvent(UIEvent.FOCUS_IN));
				}
			}
		}
		
		/**
		 * 释放所有资源
		 */
		public function dispose():void
		{
			// 释放所有组件
			for (var i:int = 0; i < _components.length; i++)
			{
				_components[i].dispose();
			}
			_components.length = 0;
			
			_focusedComponent = null;
			_hoveredComponent = null;
			_instance = null;
		}
		
		// 属性访问器
		public function get viewportWidth():int { return _viewportWidth; }
		public function get viewportHeight():int { return _viewportHeight; }
		public function get projectionMatrix():Matrix4 { return _projectionMatrix; }
		public function get focusedComponent():UIComponent { return _focusedComponent; }
		public function get mouseX():Number { return _mouseX; }
		public function get mouseY():Number { return _mouseY; }
		public function get mousePressed():Boolean { return _mousePressed; }
	}
}