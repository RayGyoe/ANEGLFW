package ui.test
{
	import ui.core.UIManager;
	import ui.components.Button;
	import ui.components.Image;
	import ui.events.UIEvent;
	import flash.events.EventDispatcher;
	import flash.utils.Timer;
	import flash.events.TimerEvent;

	/**
	 * UI框架测试用例类
	 * 提供按钮和图片组件的功能测试
	 * @author Generated by AI Assistant
	 */
	public class UITestCase extends EventDispatcher
	{
		// 测试结果事件
		public static const TEST_COMPLETE:String = "testComplete";
		public static const TEST_FAILED:String = "testFailed";
		
		// 测试组件
		private var _uiManager:UIManager;
		private var _testButton:Button;
		private var _testImage:Image;
		private var _testButton2:Button;
		
		// 测试状态
		private var _currentTest:int = 0;
		private var _testResults:Vector.<String>;
		private var _testTimer:Timer;
		
		/**
		 * 构造函数
		 */
		public function UITestCase()
		{
			_testResults = new Vector.<String>();
			_uiManager = UIManager.getInstance();
		}
		
		/**
		 * 开始所有测试
		 */
		public function runAllTests():void
		{
			trace("=== UI框架测试开始 ===");
			_currentTest = 0;
			_testResults.length = 0;
			
			// 设置UI管理器视口
			_uiManager.setViewport(800, 600);
			
			// 开始第一个测试
			runNextTest();
		}
		
		/**
		 * 运行下一个测试
		 */
		private function runNextTest():void
		{
			switch (_currentTest)
			{
				case 0:
					testButtonCreation();
					break;
				case 1:
					testButtonEvents();
					break;
				case 2:
					testButtonStates();
					break;
				case 3:
					testImageCreation();
					break;
				case 4:
					testImageLoading();
					break;
				case 5:
					testImageScaling();
					break;
				case 6:
					testUIManagerFunctionality();
					break;
				default:
					finishAllTests();
					return;
			}
			
			_currentTest++;
		}
		
		/**
		 * 测试1：按钮创建
		 */
		private function testButtonCreation():void
		{
			trace("测试1：按钮创建");
			
			try
			{
				// 创建按钮
				_testButton = new Button(100, 100, 150, 40, "测试按钮");
				
				// 验证属性
				if (_testButton.x == 100 && _testButton.y == 100 && 
					_testButton.width == 150 && _testButton.height == 40 &&
					_testButton.text == "测试按钮" && _testButton.enabled)
				{
					_testResults.push("✓ 按钮创建测试通过");
					trace("✓ 按钮创建测试通过");
				}
				else
				{
					_testResults.push("✗ 按钮创建测试失败：属性不正确");
					trace("✗ 按钮创建测试失败：属性不正确");
				}
				
				// 添加到UI管理器
				_uiManager.addComponent(_testButton);
			}
			catch (error:Error)
			{
				_testResults.push("✗ 按钮创建测试失败：" + error.message);
				trace("✗ 按钮创建测试失败：" + error.message);
			}
			
			// 延迟执行下一个测试
			setTimeout(runNextTest, 100);
		}
		
		/**
		 * 测试2：按钮事件
		 */
		private function testButtonEvents():void
		{
			trace("测试2：按钮事件");
			
			try
			{
				var eventReceived:Boolean = false;
				
				// 添加点击事件监听器
				_testButton.addEventListener(UIEvent.CLICK, function(event:UIEvent):void {
					eventReceived = true;
					trace("按钮点击事件触发");
				});
				
				// 模拟点击事件
				_testButton.dispatchEvent(new UIEvent(UIEvent.CLICK, 125, 120));
				
				if (eventReceived)
				{
					_testResults.push("✓ 按钮事件测试通过");
					trace("✓ 按钮事件测试通过");
				}
				else
				{
					_testResults.push("✗ 按钮事件测试失败：事件未触发");
					trace("✗ 按钮事件测试失败：事件未触发");
				}
			}
			catch (error:Error)
			{
				_testResults.push("✗ 按钮事件测试失败：" + error.message);
				trace("✗ 按钮事件测试失败：" + error.message);
			}
			
			setTimeout(runNextTest, 100);
		}
		
		/**
		 * 测试3：按钮状态
		 */
		private function testButtonStates():void
		{
			trace("测试3：按钮状态");
			
			try
			{
				// 测试启用/禁用
				_testButton.enabled = false;
				var disabledState:String = _testButton.state;
				
				_testButton.enabled = true;
				var enabledState:String = _testButton.state;
				
				// 测试文本更改
				_testButton.text = "新文本";
				var newText:String = _testButton.text;
				
				if (disabledState == Button.STATE_DISABLED && 
					enabledState == Button.STATE_NORMAL &&
					newText == "新文本")
				{
					_testResults.push("✓ 按钮状态测试通过");
					trace("✓ 按钮状态测试通过");
				}
				else
				{
					_testResults.push("✗ 按钮状态测试失败：状态变化不正确");
					trace("✗ 按钮状态测试失败：状态变化不正确");
				}
			}
			catch (error:Error)
			{
				_testResults.push("✗ 按钮状态测试失败：" + error.message);
				trace("✗ 按钮状态测试失败：" + error.message);
			}
			
			setTimeout(runNextTest, 100);
		}
		
		/**
		 * 测试4：图片创建
		 */
		private function testImageCreation():void
		{
			trace("测试4：图片创建");
			
			try
			{
				// 创建图片组件
				_testImage = new Image(300, 100, 200, 150);
				
				// 验证属性
				if (_testImage.x == 300 && _testImage.y == 100 && 
					_testImage.width == 200 && _testImage.height == 150 &&
					_testImage.scaleMode == Image.SCALE_MODE_STRETCH)
				{
					_testResults.push("✓ 图片创建测试通过");
					trace("✓ 图片创建测试通过");
				}
				else
				{
					_testResults.push("✗ 图片创建测试失败：属性不正确");
					trace("✗ 图片创建测试失败：属性不正确");
				}
				
				// 添加到UI管理器
				_uiManager.addComponent(_testImage);
			}
			catch (error:Error)
			{
				_testResults.push("✗ 图片创建测试失败：" + error.message);
				trace("✗ 图片创建测试失败：" + error.message);
			}
			
			setTimeout(runNextTest, 100);
		}
		
		/**
		 * 测试5：图片加载
		 */
		private function testImageLoading():void
		{
			trace("测试5：图片加载");
			
			try
			{
				var loadEventReceived:Boolean = false;
				
				// 添加加载完成事件监听器
				_testImage.addEventListener(UIEvent.COMPLETE, function(event:UIEvent):void {
					loadEventReceived = true;
					trace("图片加载完成事件触发");
				});
				
				// 模拟加载（由于没有实际图片文件，这里只测试API）
				_testImage.source = "https://cdn.edstatic.com/202608280145/9a05fc82b07e00871d5e2559724b45e1/2023/01/06/3528b131aa555e561a2764d71c5ddb4b4fcb6578_img_thumb_200_auto.png";
				
				if (_testImage.source == "https://cdn.edstatic.com/202608280145/9a05fc82b07e00871d5e2559724b45e1/2023/01/06/3528b131aa555e561a2764d71c5ddb4b4fcb6578_img_thumb_200_auto.png")
				{
					_testResults.push("✓ 图片加载API测试通过");
					trace("✓ 图片加载API测试通过");
				}
				else
				{
					_testResults.push("✗ 图片加载API测试失败");
					trace("✗ 图片加载API测试失败");
				}
			}
			catch (error:Error)
			{
				_testResults.push("✗ 图片加载测试失败：" + error.message);
				trace("✗ 图片加载测试失败：" + error.message);
			}
			
			setTimeout(runNextTest, 100);
		}
		
		/**
		 * 测试6：图片缩放模式
		 */
		private function testImageScaling():void
		{
			trace("测试6：图片缩放模式");
			
			try
			{
				// 测试不同缩放模式
				_testImage.scaleMode = Image.SCALE_MODE_FIT;
				var fitMode:String = _testImage.scaleMode;
				
				_testImage.scaleMode = Image.SCALE_MODE_FILL;
				var fillMode:String = _testImage.scaleMode;
				
				_testImage.scaleMode = Image.SCALE_MODE_NONE;
				var noneMode:String = _testImage.scaleMode;
				
				// 测试平滑设置
				_testImage.smooth = false;
				var smoothOff:Boolean = _testImage.smooth;
				
				_testImage.smooth = true;
				var smoothOn:Boolean = _testImage.smooth;
				
				if (fitMode == Image.SCALE_MODE_FIT && 
					fillMode == Image.SCALE_MODE_FILL &&
					noneMode == Image.SCALE_MODE_NONE &&
					!smoothOff && smoothOn)
				{
					_testResults.push("✓ 图片缩放模式测试通过");
					trace("✓ 图片缩放模式测试通过");
				}
				else
				{
					_testResults.push("✗ 图片缩放模式测试失败");
					trace("✗ 图片缩放模式测试失败");
				}
			}
			catch (error:Error)
			{
				_testResults.push("✗ 图片缩放模式测试失败：" + error.message);
				trace("✗ 图片缩放模式测试失败：" + error.message);
			}
			
			setTimeout(runNextTest, 100);
		}
		
		/**
		 * 测试7：UI管理器功能
		 */
		private function testUIManagerFunctionality():void
		{
			trace("测试7：UI管理器功能");
			
			try
			{
				// 创建第二个按钮
				_testButton2 = new Button(100, 200, 100, 30, "按钮2");
				_uiManager.addComponent(_testButton2);
				
				// 测试组件数量
				var componentCount:int = _uiManager.getComponentCount();
				
				// 测试移除组件
				_uiManager.removeComponent(_testButton2);
				var newComponentCount:int = _uiManager.getComponentCount();
				
				// 测试鼠标事件处理
				_uiManager.handleMouseMove(125, 120);
				_uiManager.handleMouseDown(125, 120);
				_uiManager.handleMouseUp(125, 120);
				
				if (componentCount == 3 && newComponentCount == 2) // 按钮1 + 图片 + 按钮2，然后移除按钮2
				{
					_testResults.push("✓ UI管理器功能测试通过");
					trace("✓ UI管理器功能测试通过");
				}
				else
				{
					_testResults.push("✗ UI管理器功能测试失败：组件管理不正确");
					trace("✗ UI管理器功能测试失败：组件管理不正确");
				}
			}
			catch (error:Error)
			{
				_testResults.push("✗ UI管理器功能测试失败：" + error.message);
				trace("✗ UI管理器功能测试失败：" + error.message);
			}
			
			setTimeout(runNextTest, 100);
		}
		
		/**
		 * 完成所有测试
		 */
		private function finishAllTests():void
		{
			trace("=== UI框架测试完成 ===");
			
			// 统计测试结果
			var passedCount:int = 0;
			var failedCount:int = 0;
			
			for each (var result:String in _testResults)
			{
				trace(result);
				if (result.indexOf("✓") == 0)
				{
					passedCount++;
				}
				else
				{
					failedCount++;
				}
			}
			
			trace("\n测试总结：");
			trace("通过：" + passedCount + " 个测试");
			trace("失败：" + failedCount + " 个测试");
			trace("总计：" + (passedCount + failedCount) + " 个测试");
			
			// 派发测试完成事件
			if (failedCount == 0)
			{
				dispatchEvent(new UIEvent(TEST_COMPLETE, false, false, NaN, NaN, "所有测试通过"));
			}
			else
			{
				dispatchEvent(new UIEvent(TEST_FAILED, false, false, NaN, NaN, failedCount + " 个测试失败"));
			}
		}
		
		/**
		 * 清理测试资源
		 */
		public function cleanup():void
		{
			if (_testButton)
			{
				_uiManager.removeComponent(_testButton);
				_testButton.dispose();
				_testButton = null;
			}
			
			if (_testImage)
			{
				_uiManager.removeComponent(_testImage);
				_testImage.dispose();
				_testImage = null;
			}
			
			if (_testButton2)
			{
				_uiManager.removeComponent(_testButton2);
				_testButton2.dispose();
				_testButton2 = null;
			}
			
			if (_testTimer)
			{
				_testTimer.stop();
				_testTimer = null;
			}
		}
		
		/**
		 * 简单的setTimeout实现
		 * @param callback 回调函数
		 * @param delay 延迟时间（毫秒）
		 */
		private function setTimeout(callback:Function, delay:Number):void
		{
			if (_testTimer)
			{
				_testTimer.stop();
			}
			
			_testTimer = new Timer(delay, 1);
			_testTimer.addEventListener(TimerEvent.TIMER_COMPLETE, function(event:TimerEvent):void {
				callback();
			});
			_testTimer.start();
		}
		
		// 属性访问器
		public function get testResults():Vector.<String> { return _testResults; }
	}
}