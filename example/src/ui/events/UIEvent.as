package ui.events
{
	import flash.events.Event;

	/**
	 * UI事件类
	 * 定义UI框架中使用的各种事件类型
	 * @author Generated by AI Assistant
	 */
	public class UIEvent extends Event
	{
		// 事件类型常量
		public static const CLICK:String = "uiClick";
		public static const MOUSE_DOWN:String = "uiMouseDown";
		public static const MOUSE_UP:String = "uiMouseUp";
		public static const MOUSE_OVER:String = "uiMouseOver";
		public static const MOUSE_OUT:String = "uiMouseOut";
		public static const MOUSE_MOVE:String = "uiMouseMove";
		public static const CHANGE:String = "uiChange";
		public static const FOCUS_IN:String = "uiFocusIn";
		public static const FOCUS_OUT:String = "uiFocusOut";
		public static const RESIZE:String = "uiResize";
		public static const LOAD_COMPLETE:String = "uiLoadComplete";
		public static const LOAD_ERROR:String = "uiLoadError";
		
		// 加载事件类型
		public static const COMPLETE:String = "complete";
		public static const ERROR:String = "error";
		
		// 事件数据
		private var _mouseX:Number;
		private var _mouseY:Number;
		private var _data:Object;
		
		/**
		 * 构造函数
		 * @param type 事件类型
		 * @param bubbles 是否冒泡
		 * @param cancelable 是否可取消
		 * @param mouseX 鼠标X坐标
		 * @param mouseY 鼠标Y坐标
		 * @param data 附加数据
		 */
		public function UIEvent(type:String, bubbles:Boolean = false, cancelable:Boolean = false, 
							   mouseX:Number = NaN, mouseY:Number = NaN, data:Object = null)
		{
			super(type, bubbles, cancelable);
			_mouseX = mouseX;
			_mouseY = mouseY;
			_data = data;
		}
		
		/**
		 * 克隆事件
		 * @return 克隆的事件对象
		 */
		public override function clone():Event
		{
			return new UIEvent(type, bubbles, cancelable, _mouseX, _mouseY, _data);
		}
		
		/**
		 * 转换为字符串
		 * @return 字符串表示
		 */
		public override function toString():String
		{
			return formatToString("UIEvent", "type", "bubbles", "cancelable", "mouseX", "mouseY");
		}
		
		// 属性访问器
		public function get mouseX():Number { return _mouseX; }
		public function get mouseY():Number { return _mouseY; }
		public function get data():Object { return _data; }
	}
}